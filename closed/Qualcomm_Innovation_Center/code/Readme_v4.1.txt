######
###### Build mlperf_app.apk with QTI backend support for testing on Android
######

git clone https://github.com/mlcommons/mobile_app_closed
cd mobile_app_closed
git checkout submission_v4.1_qti

# Qualcomm App source code => https://github.com/mlcommons/mobile_app_closed/tree/submission-v4.1_qti

#download the qairt sdk 2.25.0.240728 from this path
https://qpm.qualcomm.com/#/main/tools/details/qualcomm_neural_processing_sdk (Version 2.25.0.240728)
# Select "Linux" and "Version 2.25.0.240728" from this path.
# Instructions to install Qualcomm Package Manager 3 is also in the same page above.

Install QPM3 from https://qpm.qualcomm.com/#/main/tools/details/QPM3

From terminal, run below commands:

1. qpm-cli --login <username>
2. qpm-cli --license-activate qualcomm_neural_processing_sdk
3. qpm-cli --extract qualcomm_neural_processing_sdk (or)
   qpm-cli --extract <full path to downloaded .qik file>


# copy the extracted qairt folder from opt/qcom/aistack to mobile_app_closed/mobile_back_qti,
# make sure to set up firebase as instructed in https://github.com/mlcommons/mobile_app_open/blob/master/docs/environment-setup/env-setup-firebase.md
make OFFICIAL_BUILD=false FLUTTER_BUILD_NUMBER=1 WITH_QTI=1 docker/flutter/android/release

# To build for Stable Diffusion with SD8G3 <optional>
# Step 1: Download "Notebook for stable diffusion" from QPM. You need to search for "notebook for stable diffusion" in QPM.
# Step 2: Copy include folder from <path_to_notebook>/model/example3/host_linux_target_android_with_MLPerf/include to mobile_back_qti/cpp/backend_qti/StableDiffusionShared/
# Step 3: Copy libStableDiffusionShared.so from <path_to_notebook>/model/example3/host_linux_target_android_with_MLPerf/libs/aarch64-android/ to mobile_back_qti/cpp/backend_qti/StableDiffusionShared/
# Step 4: Run the command below 
# make OFFICIAL_BUILD=true FLUTTER_BUILD_NUMBER=1 WITH_STABLEDIFFUSION=1 WITH_QTI=1 docker/flutter/android/release


# If there is any issue in regards to copying of the apk to output/android-apks, the release apk can be obtained from flutter/build/app/outputs

# Install app to device
adb install output/android-apks/<date>_mlperfbench-<commit_id>-qt.apk
#Open the app once on the device (to create the app's directory)

# Generate the DLCs
# Step 1: cd mobile_app_closed/mobile_back_qti/DLC/
# Step 2: sudo make htp-dlc SNPE_SDK=<path to unzipped qairt sdk 2.25.0.240728>
# Successful execution of make script will genearte necessary DLCs inside mobile_app_closed/output/DLC/mlperf_models

# To generate the bin files for Stable Diffusion <optional>
# Please follow the steps mentioned in mobile_app_closed/mobile_back_qti/DLC/util/StableDiffusion/README.md
# Successful execution of steps mentioned in above README.md will create stable diffusion artifacts inside mobile_app_closed/output/DLC/mlperf_models


# Push the models to the device
adb push mobile_app_closed/output/DLC/mlperf_models /sdcard/Android/data/org.mlcommons.android/mlperfbench/files/

# Push the datatsets to the device (required only for accuracy)
adb push mlperf_datasets /sdcard/Android/data/org.mlcommons.android/mlperfbench/files/

# For Stable Diffusion accuracy <optional>
Copy clip_model_512x512.tflite from mlcommons github path to /sdcard/Android/data/org.mlcommons.android/mlperfbench/files/mlperf_models/stable_diffusion

# select submission mode and press GO




#######
####### Build commandline app with QTI backend support for testing on Windows on Arm
#######
git clone https://github.com/mlcommons/mobile_app_closed
cd mobile_app_closed
git checkout submission_v4.1_qti

# copy the QAIRT SDK to mobile_back_qti
# https://qpm.qualcomm.com/#/main/tools/details/qualcomm_neural_processing_sdk
# make sure to copy QAIRT SDK Version 2.25.0.240728

# Sample path to arm64RT libs: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Redist\MSVC\14.29.30133\arm64\Microsoft.VC142.CRT"
make WITH_QTI=1 WITH_TFLITE=0 MSVC_ARM_DLLS=<path to arm64RT libs> cmdline/windows/release

# the binary files are generated in output\windows\cmdline

# Generate the DLCs (needs to be done using Android (already generated by Anh))
# Same DLCs as generated by Anh can be used
 
# push all the command line files in to the Windows device.
# push all the datasets to the device to C:\Dropbox\lite_datasets and complete datasets to C:\Dropbox\mlperf_datasets
# push all the DLCs to the device to C:\Dropbox\mlperf_models
# open powershell on the device. CD to the cmdline folder on the device.
# Use the script .\run_mlperf_tests.bat to run the tests 
.\run_mlperf_tests.bat --dataset C:\Dropbox\lite_datasets --models C:\Dropbox\mlperf_models --mode performance
.\run_mlperf_tests.bat --dataset C:\Dropbox\mlperf_datasets --models C:\Dropbox\mlperf_models --mode accuracy
# see the results in performance_results.txt and accuracy_results.txt


